@using Boot.Enums
@model Boot.Models.HeroModel

@foreach (var stat in Model.Stats)
{
    <div class="col-md-3 col-6">
        <div class="row border">
            @Html.Partial("_HeroStatPartial", stat)
            <div class="col-12 my-2">@ButtonGroup(stat, Model.FreeStatPoints())</div>
        </div>
    </div>
}

@Html.Partial("_SecondStats", Model)

<div class="col-lg-4 col-md-6 col-12">
    <div class="my-3">
        <div id="status"></div>
        @{Html.RenderAction("RacesDropdown", new { chosen = Model.Race });}
    </div>
    <div class="alert alert-info m-0 py-2">Cвободных очков: @Model.FreeStatPoints()</div>
    <button class="mt-3 btn @(Model.FreeStatPoints() == 0 ? "btn-success" : "btn-secondary") ajax-btn"
            data-url="@Url.Action("Traits")" @(Model.FreeStatPoints() == 0 ? "" : "disabled")>
        Ок
    </button>
</div>

@helper ButtonGroup(Boot.Models.HeroStat stat, int freePoints)
{
    <div class="btn-group">
        @Button(stat, -3, freePoints, true)
        @Button(stat, -1, freePoints, false)
        @Button(stat, 1, freePoints, false)
        @Button(stat, 3, freePoints, true)
    </div>
}

@helper Button(Boot.Models.HeroStat stat, int bonus, int freePoints, bool onlyLg)
{
    var canChange = bonus > 0
        ? stat.Value + bonus <= stat.Max && freePoints - bonus >= 0
        : stat.Value + bonus >= stat.Min;

    var onlyLgClass = onlyLg ? "d-lg-block d-none" : "";
    <button class="btn @GetColor(canChange) @onlyLgClass ajax-btn" @(canChange ? "" : "disabled") data-action="@Status.Stats"
            data-url="@Url.Action("ChangeStat", new {stat = stat.Id, value = bonus})">
        @(bonus > 0 ? $"+{bonus}" : $"{bonus}")
    </button>
}

@helper GetColor(bool can)
{
    @(can ? "btn-success" : "btn-secondary")
}